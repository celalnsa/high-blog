<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[兰州 兰州]]></title>
    <url>%2F2018%2F08%2F28%2Flanzhou-lanzhou%2F</url>
    <content type="text"><![CDATA[在兰州逗留4天，计划外的计划。 这两天才知道，甘肃是华夏文明的重要发祥地。 把兰州当做去敦煌中转站的初衷，意外捡到惊喜。 相比西安，兰州没有帝王经过留下的金碧辉煌，她凝视的，是更多小人物的朴实宁静。 四年前在泸定种下的旅行理想，在兰州收获。到一个城市，像当地人一样生活，离开的时候，竟然萌生出一丝乡愁。 去大自然烤肉点一斤羊肉，和同桌的情侣搭话。即便没有安利费，也强烈推荐我点烤土豆片，羊骨头汤。一边解释为什么羊骨头汤好喝，一边聊兰州的交通怎么样。男生催女生赶电影的场，“快走吧，八点四十开始”，临走前两人还不忘跟我告别，“你慢慢吃啊”。 酒泉路夜市，排着队观看摄影师给白胡子老爷爷拍照。舀牛奶，舀醪糟，打鸡蛋，乘进纸杯，动作缓慢，面带微笑。直到摄影师不断竖起大拇指夸赞，“真棒”。舌尖上的中国真人秀，现场10块，还送一杯鸡蛋牛奶醪糟，超值。 中元节的傍晚，在街边有个一个小型祭祀台，几个大叔阿姨忙着点蜡烛烧纸钱。先来的阿姨看到后来的大叔挤占位子，大声质问，“我们先来的呀”。 在兰州大学榆林校区，看到花海心里怒放的我给一起拼车的同学发消息，说这应该是国内大学里自然环境最好的，同学回复，“据说武汉大学的环境是最好的”，紧接着补充，“没去过，我也搞不清楚哪里是最好的”。于是我们约定，将来我去武大看看，再告诉他有没有比这里好。 何以惹乡愁？ 大概是厚实的银杏叶，大概是又呛又辣的牛肉面，大概是上火拉肚子，大概是在白塔山流着鼻血打战队赛，大概是在兰大花海里打瞌睡，大概是许多熟悉喜爱的交谈，大概是一种毫不掩饰的市井气。 还有吗？ 有黄河水，无语东流。]]></content>
      <categories>
        <category>世界</category>
      </categories>
      <tags>
        <tag>travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[西安游记]]></title>
    <url>%2F2018%2F08%2F24%2Fa-trip-to-xian%2F</url>
    <content type="text"><![CDATA[打包准备离开西安的时候，居然有一点不舍。 对西安的向往源自很多东西，儿时的电视剧「寻秦记」，充满神秘的秦始皇陵，梦幻西游的场景，玄奘，大雁塔，李世民，武则天，无数熟悉的名字和故事。 这个中国历史上重要的古都，任何一片砖瓦都充满了故事性。 在博物馆，看到智慧的祖先从打磨石器骨器，到陶器青铜器瓷器；从无意间给陶上了釉，到唐三彩；从学习和模仿自然，到脱离基本生存需求的创新创作，以及今天传统艺术的千万种表达方式。 无数古人刻下的石碑，孟子，大学，中庸，兰亭序，一篇篇从小到大学习的经典，想象着它们是如何通过石碑被埋藏又被发现。如果古人见到他们写的东西在今天被人研究，甚至在汉文化中占据如此重要的位置，他们很多事情的做法会不会不一样，会不会有什么话特别想要对今天的人说？ 那些断首断臂，残缺破碎的佛像，是怎样被工匠制造，精心雕琢，怎样接受信徒的参拜，又是怎样被打倒，被破坏。 在西安城墙上暴走，看着夜晚一个个灯笼亮起来，城内外灯火通明，好奇以前的百姓是如何进出城，守城的士兵是如何把这么多的灯点亮，是不是也会有百姓像那个大叔一样，绕城墙一圈跑步健身？ 兵马俑为什么每个陶俑的脸都不一样，是不是真的按照当时人的面孔制作的？为啥没看到古天乐？ 嬴政很神秘，始皇陵更神秘，作为一个39岁就一统中国的英雄，我们能看到的只有一个写着秦始皇帝墓的石碑和一个种满了柏树的山坡。有点像哈利波特里的绿色迷宫，下雨，无人，阴森森。 那些损坏却被保存至今的石碑，佛像，城墙，不会说话，却给你讲了许多年代久远的故事。 其他的点。 出行方便，高铁，地铁，公交，共享单车，无缝衔接。 物价极低，吃住成本是上海的一半。吃的东西几乎都跟面有关，各种夹馍，泡馍，油泼扯面，臊子面，味道不错。 关于人的故事。 1.去到一家连锁的餐厅，等着像上海一样有个服务员进来问你几位然后带你进去，结果没人理我[捂脸]。问收银员是不是我要先来她这里下单，她说不然嘞，然后问是不是自己找地方坐，她说不然嘞。感觉自己像个被惯坏的智障哈哈哈。 2.一个初中同学，一家人在西安做生意，唯一的印象就是有钱[两个捂脸]。 3.两个西安本地人，一个已经工作，一个才读大三。都还没去过陕西历史博物馆，抱着跟我一样的心情排队换票和参观，还通过我了解兵马俑和始皇陵[三个捂脸]。]]></content>
      <categories>
        <category>世界</category>
      </categories>
      <tags>
        <tag>travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[成熟之未来解]]></title>
    <url>%2F2018%2F08%2F15%2Fmaturity-is-not-surrender%2F</url>
    <content type="text"><![CDATA[成熟不是要你献上膝盖，而是要你挺直腰板。 过去说成熟，总是会谈到圆通、中庸这些高大上的概念，这次说点具体的。 首先，一个人变成熟为的什么？ 有时候是为了让大家皆欢喜，有时是为了给自己留余地。一个成熟之人的日常表现，往往有一些套路。比如不承诺做不到的事，不轻易得罪人，给自己留退路，甚至是鬼谷子的谋于阴而成于阳，其实都是求未来者如期，不后悔，或者后悔的时候有所减轻。 取其中要素，就是今天做的事不让明天后悔。 这就很有意思了，圆滑世故好像是成熟？非也，圆滑世故的你将来面对真实的你，会后悔的吧？ 其次，如何做才称得上成熟？ 既然成熟是为了让今天的自己做事不使明天的自己后悔，那么应该有两种方式可以做到： 提高做事情的靠谱程度 降低犯后悔情绪的容易程度 换言之，你可以让今天的自己多做好事，别那么冲动；也可以让明天的自己心态放开一点，别那么容易后悔。 从身边的无数案例你会发现，大家已经在当下付出了很多努力，谨小慎微，坚决不给未来的自己留坑，紧张兮兮，结果还是一堆坑。 从另一个角度实践的人很少但其实效果最明显：别那么容易后悔，做一件事情之前，先把所有最糟糕的情况考虑到，做好准备，放开手脚认真去做就好。挺直腰板，不跪不躺。 简而言之，成熟的一个解，叫做心态好。失败了也不后悔，失败也是一种成功。 多年前来自一个学长的话： 但行好事，莫问前程。]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>stream-of-consciousness</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[年[27]]]></title>
    <url>%2F2018%2F08%2F13%2Fyear-27%2F</url>
    <content type="text"><![CDATA[三年一站，仿佛已经成为人生路途的一个隐形规则。 小学三四年级转学昆明又回老家，小升初，初升高，大学。 日益变化的行业，在同一个厂搬砖三年，身边的工友基本换了个遍。 除去少数偶发事件，我已经习惯了三年一次的迁徙。在这样的变化中，心智逐渐成熟，越来越明确自己喜欢什么，不喜欢什么，什么是心花怒放，什么是后会无期。 其实人内心深处常常是渴望能永远停留的，比如停在高中的某段时间，比如跟某人天天在一起，比如在一家很喜欢的公司里干一辈子。可惜世界是流动的，不由人的，对吗？ 从某些意义上讲，我最重视的关系还是朋友，因为朋友真诚，朋友无用，朋友为自己所选择，朋友不需要负担，朋友跨越时间空间，永远都在。 最希望身边所有的人，所有的关系，都可以转换成朋友。 比如说上司的器重，对我来说这件事值得高兴，也值得不高兴。 先说说器，在我们的文化里，器是一个复杂的概念。狭义上讲，器是一种工具，延伸一点是才能，广义上讲，器是一种形式。 说上司器重为何使你高兴，因为你的才能得到认可。为何使你不高兴，因为对他来说，你只是个器。这就导致他再欣赏你，也只是考虑怎么把你用好，而极少真诚地把你当朋友，其实他更多的还是为他自己。这点很让人难过，因为你再推广出去，周围的同事，你把他们当朋友，他们会不会只是把你当做一个器？再看你身边的亲人，你对他们来说也只是个器吗？陌生人，我把微信账号给你，你用来骗钱，你是不是也把我当做一个器？ 告诉我，想到这些你会不会难过。 我明白这是世界的规则，没关系，你有你的规则，我有我的理想。 你还记得古人说玉不琢，不成器。但你记不记得孔子说，君子不器。人在追求成器的同时，能否做到对待自己，对待朋友，可以不器。我也许做的不好，但我不会停止努力。 也许是人到了这么个状态，最近经常考虑如何去为别人负责的问题。如果成为一个丈夫或者父亲，要如何经营才能和睦幸福；如果带领一个团队，要如何对上不辱使命，对下保证健康成长；如果自己做一个产品，要如何对社会有益，好好发育。 面对如此复杂的问题，总是觉得有一天时候到了，答案自然会摆在眼前。事实是自己的答案还没到，周围的人已经在催了，大家希望你在实践中学习和成长。真的考虑起来，他们总是为你好的。 然而有些事啊，你一旦前进了就会进入一种两难境地，别无选择。 比如结婚生子这个事，怎么在实践中学习？最怕的是为了家庭和睦，委屈了自己，为了保全自己的内心，委屈了家人。所谓的家和万事兴，必然有人牺牲自己。如果我就是不妥协呢？我的反骨不会同意。 所以我还是希望等那么一天，时候到了，对一切都满意，不需要内心妥协，是不是命都认。 也许就是在这样的自问自答中找到答案呢？ 我想人这一生经历过的所有事情，无论勇敢还是懦弱，成熟还是幼稚，耀眼还是黯淡，最后都一定会有影响，深浅不一。 就像每一次将要迎接新的环境，我都会想起初中读《沙漏》里的一句话： 那一天，你理着傻傻的平头，对着吉凶未卜的高中生活，露出了自信无敌的笑容。]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>stream-of-consciousness</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018新年前的一个马蜂窝]]></title>
    <url>%2F2018%2F02%2F15%2Fa-vespidae-before-2018-chinese-new-year%2F</url>
    <content type="text"><![CDATA[亢龙有悔。 易经说亢龙有悔，当你春风得意的时候，马上可能马失前蹄。 第一次对这件事有一个哲学性地思考，是小学六年级快要小升初考试的时候，第二次市里统一考试，有点糟糕。我去找平时严肃的语文老师，她问我：“考砸啦，没关系啊，我就希望你这次考砸。上次年级第一，你都快飘起来了，考砸一次能让你沉下心，毕竟下次才是真正重要的考试。”听完她的话，胸口涌动，视线模糊。语文老师是真的了解我，至今很感谢她给我上了如此重要的一课。 古人说，德不配位，必有灾殃。应该是我此生至今最难忘的训诫，每当自己或者别人有什么福禄或者灾祸，我总会思考，自己或者别人是否能承受，是否应得。尽量做到面色红润，谨小慎微。 然而修为不够，底子不够沉的人总是会浮出水面，然后翻车。最近应该是没那么谨慎注意，加上一点点繁事缠身，就犯了大错。 犯错很难过，就更应该把事情做好。 线上无小事，唯有自洽的体系与小心。 与年轻共勉。新年快乐。]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>think</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[代码即利剑4]用alda作曲]]></title>
    <url>%2F2018%2F01%2F19%2Fcode-as-sword-4-alda%2F</url>
    <content type="text"><![CDATA[本文介绍如何使用alda编写曲谱。 alda的官方描述：A music programming language for musicians. 很酷吧。 可以在官方的web-demo先体验一下 #安装 参考官方介绍安装alda. 启动alda服务 1alda up #语法 首先尝试演奏一小段： 1alda play --code "piano: c6 d12 e6 g12~4" piano: c6 d12 e6 g12~4就是alda写乐谱时的基本格式 首先指定乐器piano：然后是音c和表示时长的6 #乐器 alda支持的乐器列表 #音高 十二平均律把音分成从低到高的c c# d d# e f f# g g# a a# b 在alda里，可以表示为c c+ d d+ e f f+ g g+ a a+ b，当然降c可以表示为c- 在乐谱的开头可以指定Octave为第几个八度： 1piano: o3 c d e g 在乐谱中可以用&gt;将后续音符提高一个八度，用&lt;降低一个八度： 1piano: o4 c d e g &gt; c d e g &lt; c d e g #音长 alda音符后面的数字指示音的长短： c4表示一个1/4拍的c，c8表示一个1/8拍的c，注意没指定时默认用之前指定过的音长，如c2 d e中c后面的d和e都会变成1/2拍 g12~4表示一个1/12拍加1/4拍的g 1piano: c6 d12 e6 g12~4 #休止音符 休止音符用r表示，仍然可以跟数字表示音长： 1piano: c6 d12 e6 g12~4 r4 c6 d12 e6 a12~4 #和弦 可以用/表示同时奏响，如： 1piano: c/e/g c/e/g c/e/a c/e/a #多乐器合奏 12345piano: c6 d12 e6 g12~4 r4 c6 d12 e6 a12~4guitar: c/e/g6 r3 r2 c/e/g6 #一个例子 新建乐谱test.alda，内容： 12345678(tempo! 90)(quant! 95)piano: o5 g- &gt; g- g-/f &gt; e- d-4. &lt; b-8 d-2 | c-4 e- d- d- &lt;b-1/&gt;g-flute: r2 g-4 a- b-2. &gt; d-32~ e-16.~8 &lt; b-2 a- g-1 播放乐谱 1alda play --file test.alda #Alda REPL alda提供了交互式命令行的服务，通过alda repl进入交互式命令行状态，可以直接敲乐谱的代码播放。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>alda</tag>
        <tag>compose</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[代码即利剑3]用reveal做ppt]]></title>
    <url>%2F2018%2F01%2F18%2Fcode-as-sword-3-reveal%2F</url>
    <content type="text"><![CDATA[本文推荐使用reveal.js做ppt。 reveal.js是一款专门用来做ppt的前端框架，支持markdown语法，可以方便地排版以及处理样式和动画，作为一个web服务，在浏览器中打开，同时也支持转成pdf。 #安装 参考官方文档安装，如果不需要提供外部访问的服务，可以按照 Basic setup 指示，下载工程压缩包，解压后直接在浏览器中打开index.html文件即可。 #使用 修改index.html文件，在&lt;div class=&quot;slides&quot;&gt;&lt;/div&gt;标签里添加&lt;section&gt;&lt;/section&gt;即可增加一页ppt。 官方提供的demo.html本身是一个很好的文档，可以修改然后打开试试看，点击看原效果]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>ppt</tag>
        <tag>reveal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[代码即利剑2]用graphviz画流程图]]></title>
    <url>%2F2018%2F01%2F17%2Fcode-as-sword-2-graphviz%2F</url>
    <content type="text"><![CDATA[本文介绍如何用graphviz画流程图。 #工具安装 从graphviz下载安装 #简单例子 可通过运行一个简单例子，验证是否安装成功。 新建test.dot文件，内容如下： 12345678910digraph abc&#123; a; b; c; d; a -&gt; b; b -&gt; d; c -&gt; d;&#125; 生成svg： 1dot -Tsvg test.dot -o test.svg 生成的test.svg如下： #简单教程 详细教程参考官方文档dotguide #创建图 12digraph abc &#123;&#125; #添加节点 可通过[]设置属性，常用label增加注解，shape指定形状，color指定颜色 1234a [label="节点a", shape="triangle"];b [label="节点b", shape="circle", color="green"];c [label="节点c", shape="point"];d [label="节点d"]; #添加边 可通过[]设置属性，常用label增加注解，style指定形状，color指定颜色 123a -&gt; b [label="边ab", style="dashed"];b -&gt; d [label="边bd", style="dotted", color="green"];c -&gt; d [label="边ab"]; #子图 可通过subgraph创建子图，通过边在子图之间建立关联 123456subgraph sub &#123; x; y; z; d -&gt; x -&gt; y -&gt; z;&#125; #完整示例 1234567891011121314151617digraph abc &#123; a [label="节点a", shape="triangle"]; b [label="节点b", shape="circle", color="green"]; c [label="节点c", shape="point"]; d [label="节点d"]; a -&gt; b [label="边ab", style="dashed"]; b -&gt; d [label="边bd", style="dotted", color="green"]; c -&gt; d [label="边ab"]; subgraph sub &#123; x; y; z; d -&gt; x -&gt; y -&gt; z; &#125;&#125; 生成结果如下]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>graphviz</tag>
        <tag>flow-chart</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[代码即利剑1]用Markdown写文档]]></title>
    <url>%2F2018%2F01%2F16%2Fcode-as-sword-1-markdown%2F</url>
    <content type="text"><![CDATA[本文可被看做用Markdown写文档的基础教程。 #例 常常会有整理文档的需求，以前都是用Word，排版麻烦，发给别人的时候可能还有兼容问题。Markdown作为纯文本，源文件清晰明了，也可以轻松地转成pdf/ppt/html等其他格式。 入门的话推荐用网页版如https://zybuluo.com/mdeditor先体验下，下图是一个简单的例子。 #语法 #标题层次 123# 一级标题## 二级标题### 三级标题 #有序列表 1231. aaa2. bbb3. ccc aaa bbb ccc #无序列表 123* aaa* bbb* ccc aaa bbb ccc #引用 1&gt; Mr.High is getting higher. Mr.High is getting higher. #链接 1[绘制图表](https://github.com/adrai/flowchart.js) 绘制图表 #图片 1![Mou icon](http://www.easyicon.net/api/resizeApi.php?id=1174091&amp;size=128) #字体 1234567**粗体***斜体*~~删除线~~也可以用&lt;font&gt;标签包裹指定字体&lt;font face="STCAIYUN"&gt;我是华文彩云&lt;/font&gt;&lt;font color=gray size=5&gt;color=gray&lt;/font&gt;&lt;font color=#0099ff size=5 face="黑体"&gt;color=#0099ff size=5 face="黑体"&lt;/font&gt; 粗体 斜体 删除线 我是华文彩云 color=gray color=#0099ff size=5 face=“黑体” #表格 12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 #代码 12行内代码用一对`包裹like this `print 'hello world'` like this print 'hello world' 代码块用一对```包裹: ``` def hello(): print ‘hello world’ ``` 12def hello(): print 'hello world' #公式 用$$包裹LaTeX公式： 1$e^&#123;\imath x&#125; = \cos&#123;x&#125; + \imath\sin&#123;x&#125;$ $e^{\imath x} = \cos{x} + \imath\sin{x}$]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>document</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[矛盾]]></title>
    <url>%2F2017%2F08%2F20%2Fcontradiction%2F</url>
    <content type="text"><![CDATA[纯粹乃诗人美好的愿望. 以为世间万物皆有矛盾的情感, 因其复杂而成其特点. 众人皆知道圣人君子该如何,却不知往圣人君子的道路上这些人经历过哪些矛盾,而后人似也较少记录这些细节.]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>stream-of-consciousness</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小掌柜]]></title>
    <url>%2F2017%2F07%2F21%2Flittle-shopkeeper%2F</url>
    <content type="text"><![CDATA[搭车到理塘的时候，太阳已经斜在西边，风一吹就会落下去。和队友约好了在这里碰头，谢过热心的司机大哥，忘了落在车上的午餐，就一路小跑进了小镇。 路边有个男孩凑过来，小声地问：“住宿吗”，我没反应过来他说的话，只是认真地看着他，红褐色的皮肤，脸上被冻伤的细纹，一双明净透亮的眼睛。我惊奇地问：“什么”，他提高了音量：“你们要住宿吗”，我这才反应过来，“多少钱一个人”，他告诉我们三十块一个人，有热水和电热毯。几乎没有经过商量，我们决定就在男孩家落脚。 旁边一群小孩正在嬉戏，他叫上其中一个，一起领着我们向他家走。 “你几岁啦？” “12岁。” “哇，这么小就帮给家里帮忙啦。” 他对我们微笑，有点害羞。 “你爸爸呢？” “他出去做买卖了。” “你怎么没去读书啊？” “我以后留在家里给妈妈帮忙。” “啊？不读书了吗？” 他向我们解释，家里还有一个哥哥和一个姐姐，哥哥和姐姐去其他省读书了，弟弟不久也会被送去寺庙，平常父亲也在外奔波，父母希望他留在家里给母亲帮忙。 队友感慨地说，“好懂事啊，你就是家里的小掌柜”。 他又害羞的笑了，宝石一样的眼里泛起雾似的红晕。 来到他家，他向他母亲交代了我们之后，又出去招揽客人了。他的母亲是个亲切的阿姨，温和地给我们说明水电如何使用，然后就去做饭了。 和队友集合，安顿好一切，坐在床上翻看一天拍下的图。男孩在旁边好奇地看我，问我在做什么。我把他拉过来给他和他的弟弟拍照，他小声地问，能不能换上新的藏袍来照，我惊喜地催他快去换。 今晚恰逢藏历新年，男孩的家人邀请我们也穿上男孩哥哥姐姐的新藏袍一起拍照，他们时不时被我们摆的pose逗的哄然大笑，仿佛一家子人在一起过年，热热闹闹持续到很晚。 第二天清晨我们要继续去搭车，他出来送。 “你们以后还来吗？” “来呀，以后还住你家！” “好！” “你以后还记得我们吗？” “记得！” “回去再跟妈妈说一下，回去学校念书，以后再来当小掌柜好不好？” 小掌柜没说话，还是害羞地对我们微笑。]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>memory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内自省与对世界的宽容]]></title>
    <url>%2F2017%2F06%2F18%2Fintrospection-and-tolerant%2F</url>
    <content type="text"><![CDATA[内自省。 每做完一件事去思考这样做好不好，如何能做的更好。对别人是不是有帮助，是不是会伤害到别人。 见贤思齐焉，见不贤而内自省也。 内心剧烈挣扎过，才能理解别人的处境，也更能发现别人之所以那样做的原因。 常常洞察自己的内心，会发现自己原来有各种各样的情欲，自己会愚蠢，会贪婪。 内自省而宽容的一个境界是 塞翁失马，焉知非福。 小时候以为塞翁是早知道结局会好，后来才明白，原来是不知道结局。因为结局未知，所以还可以抱有希望，尝试争取。也是因为尘埃未定，所以可以宽容。]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>think</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜欢独处]]></title>
    <url>%2F2017%2F06%2F16%2Flove-being-alone%2F</url>
    <content type="text"><![CDATA[慎独。 暑假在火车上听歌，思考。 阅读，幻想。 骑车上下班，听书听歌，思考。 行走，跑步，洗澡，吃饭。 社交是一种技能，需要消耗能量。 论及自律，因为只能管理自己，所以常常需要独自一人。]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>think</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[年[26]]]></title>
    <url>%2F2017%2F06%2F11%2Fyear-26%2F</url>
    <content type="text"><![CDATA[关于年份的意识从2001年转学昆明的时候开始产生，一直到今天。 人对于年这个维度的清晰感受，常常需要依赖于重大历史事件和同样重大的个人经历结合，没有这些东西，就好像一年不存在，只是数字增加罢了。 比如我对2008年最深的印象是，北京奥运会的第一天，竞赛班一群同学去飞鹏老师家通宵观看开幕式。 曾经以为星座需要看农历生日，觉得金牛座的描述很像自己，稳重保守。十几年过去才发现自己是个纯正的，太阳星座和上升星座都是双子座的人。 这种纯正体现在别人所见和自己内心的契合，骄傲放纵，喜新厌旧，毫无悬念。 所有人都有与生俱来的缺点，自我教育能够帮助自己接受或者改善这些缺点，而有时候更加快速见效地方式是伪装接受这些缺点或者伪装它们的反面。 大学的时候发现自己一个缺点，那就是高中期间洋洋得瑟的各种才华，其实都足以贻笑大方之家。 对所有的新事物感兴趣，并没有让我在某一个领域得到高深的造诣。最大的矛盾在于，不但个人英雄主义想以一己之力改变世界，又想要尽情享用千百种生活方式。最后说服我自己的理由是，只要放纵去尝试和体验，足够多之后自己会在经历的广度上成为一个英雄。 算是为了假装接受自己的缺陷所引入的美丽托辞吧。 有很多年处于一种感知不到时间的状态，感受到的仅仅是自己在进步，不管是物质的肉体，还是哲学的精神，都在高速上升。现在看来，这种状态不过是生物个体正常的生命周期节点，并不会无限持续下去。然而自己和很多人一样，因为没有认识到这个道理，瘾于无时间属性的状态，消耗健康，消耗时间，浪费所有宝贵的东西而不自知，即便事实摆在眼前也能做到视而不见。 仅存几次让人觉得恐慌的，就是与自己交流的人，早已不是少年，或多或少都抱着各种成熟世俗的烦恼。 平静下来仔细想想对我又有什么影响，其实也没有，毕竟自己不仅仅愚蠢固执，还常常巧言令色说服自己和他人。 为什么要在这个时候写这些废话。]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>stream-of-consciousness</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建与jenkins通信的微信机器人]]></title>
    <url>%2F2017%2F05%2F11%2Fbuilding-a-wechat-bot-with-jenkins-api%2F</url>
    <content type="text"><![CDATA[基于当前自身对jenkins的使用经历, 加上最近发现了很多开源的微信api实现, 构思一个利用微信来执行任务并且查询任务状态的机器人. #微信api 基于网页版微信的通信机制, 很多人实现了各种语言的微信机器人api. 比如Python实现的ItChat和wxpy, 或者NodeJs实现的wechaty. #jenkinsapi jenkins支持RESTful风格的接口调用, jenkinsapi提供了一套封装。 #实现 先占坑，抽空再回来补上实现的部分。]]></content>
      <categories>
        <category>术业</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>wechat</tag>
        <tag>chatbot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[芒果]]></title>
    <url>%2F2017%2F05%2F07%2Fmango-in-childhood%2F</url>
    <content type="text"><![CDATA[立夏，又到了吃芒果的季节。 初夏的时候就买回刚上市的芒果，削去皮，果肉鲜黄，偷抹了姑娘的粉。然而好看却不好吃，酸，涩，一只小刺猬。 等到最近的芒果，质地柔软，不需要工具直接可以剥去金黄的表皮，果肉通透甚至有些蕴蓄的腐朽气息，有失卖相反倒香甜可口。 像极了交一个朋友。 十几年前在老房子窗外有几棵芒果树，夏天快到的时候，开始结出鸡蛋大的果实。还没开始熟，老阿姨就教我们用晾衣杆绑上铁圈套个袋子，伸出窗外去把芒果勾回来。晾衣杆在窗台上一进一出，就能采回一个芒果，有时候掉下一两个，还会被楼下刨冰店的老板破口大骂。窃喜和忐忑的一下午，最后的战利品是一大袋几十个青芒果。 老阿姨教我们把这些芒果包起来，放进衣柜里，压在冬天的厚衣服、棉被中间，放几个星期就能熟。等了一两天，我放学回家发现芒果基本没什么变化，就会问老阿姨，为什么放在被子里捂会熟，老阿姨也说不出个所以然。在当时的年纪，不明情况的等待让我坐立不安，隔几分钟就跑过去翻看，芒果还是青且硬。 一天晚上我突然灵感大发，问老阿姨，能不能用水煮熟？老阿姨说不行，必须要在被子里捂着。我自以为比别人聪明，就取出几个芒果，在锅里用水煮了好久，结果煮出了一股难闻的怪味，芒果也没有熟，最后只能丢掉。 后来过了几个星期，在衣柜里老老实实躺着的那些芒果真的是熟了，甜不甜印象不是很深刻，但我们几个确实开心地吃了一顿。 也许不知其所以然也是一种传递知识的形式，最近常常会有这样的想法。虽然我一直都不买账，但就算老阿姨当年给我讲出了乙烯催熟的道理，我也不会听懂一个字。反而是在高中的时候学到这部分知识，我多次回想起老阿姨教我们把青芒果捂熟的经历，更加印象深刻。 今天我学会了比老阿姨当年多得多的知识，但依然做不到像她一样从容不惑而知天命，我还是在那些急切想看到的结果之间，坐立不安。]]></content>
      <categories>
        <category>他的国</category>
      </categories>
      <tags>
        <tag>memory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[叶子]]></title>
    <url>%2F2017%2F05%2F06%2Fmusic-yezi-asang%2F</url>
    <content type="text"><![CDATA[孤单，是一个人的狂欢；狂欢，是一群人的孤单。 第一个音开始，钢琴敲下悲伤的基调。 叶子，是不会飞翔的翅膀； 翅膀，是落在天上的叶子。 因为这首歌，知道了那个代表着沧桑的名字，学会在三四分钟里像看电影一样读一首歌，无语凝噎。 此去经年，应是良辰好景虚设。便纵有千种风情，更与何人说？]]></content>
      <categories>
        <category>品诣</category>
      </categories>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[概率论经典问题-球放桶里]]></title>
    <url>%2F2017%2F05%2F02%2Fprobability-theory-classic-problem-balls-into-bins%2F</url>
    <content type="text"><![CDATA[Google论文Consistent Hashing with Bounded Loads的背景知识。 最近看到Google一篇论文Consistent Hashing with Bounded Loads，提出一种新的算法，使得在动态负载均衡的场景中，增删节点的时候流量切换更加平缓。 可以通过参考wiki百科Balls into bins，了解其背后的原理。 在计算机科学中，常常会有资源分配的问题，其中一个典型的例子是分布式服务的负载均衡：可以简单地理解为有n个桶(服务器)，需要装下m个球(客户端)。为了能让客户端尽可能随机分布在各个服务器，以保证服务器资源的平衡，比较常见的做法是通过计算给每个客户端生成一个一致性hash值，映射到服务器。实际上对大多数服务而言，m是一个无穷的值，因为客户端的请求总是源源不断地涌来。但当服务器稳定运行时，单位时间服务器需要处理的请求可以认为是近似固定的。 首先提出一种最均衡的方式，那就是每个球在投放之前，先判断每个桶当前的装球量，然后选取负载最低的桶，但实际应用中因为查询已占用资源的也有明显的开销，所以通常并不会这样做。 考虑一种特殊情况：m=n，比较容易理解，如果在这种情况下能够达到负载均衡，那么在m&gt;n的情况下，理论上也总是能够分配均衡。 进一步，当m=n的时候，如果随机把n个球放进n个桶里，那么一定会有一个或多个桶分配的球比其他的桶多，导致分布并不像想象中那么均匀，因为每个球都有1/n的概率被丢到这个桶里。 一种优化的方案是，每个球先随机选取2个桶，然后判断这两个桶当前的装球量，最后选择负载的桶来投放。按照计算结果，已经能极大程度地满足负载均衡和快速选取资源的需要。]]></content>
      <categories>
        <category>术业</category>
      </categories>
      <tags>
        <tag>probability-theory</tag>
        <tag>algorithm</tag>
        <tag>load-balancing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在react-native中利用appium进行自动化集成测试]]></title>
    <url>%2F2017%2F04%2F28%2Frn-test-e2e-test-with-appium%2F</url>
    <content type="text"><![CDATA[本篇文章简单介绍如何在react-native中使用appium进行e2e自动化测试。 #Appium与WebDriver Appium是一个用来对移动设备App进行集成测试的工具。 WebDriver是用任意语言模拟浏览器行为的标准，主要用在Selenium系列的工具，用来对web项目进行集成测试。 #ReactNative中的实现 Appium可以用 uiautomator 进行页面元素的查找和操作，用react-native写的Android页面，为了方便查找可以设置accessibilityLabel. 如下的一个Component实现： 123456789&lt;TouchableNativeFeedback background=&#123;TouchableNativeFeedback.Ripple("red", true)&#125; accessibilityLabel="clickZone" onPress=&#123;counter&#125;&gt; &lt;View style=&#123;DynamicStyle.AccessibilityLabel.clickZone&#125;&gt; &lt;Text&gt;Some Text&lt;/Text&gt; &lt;/View&gt;&lt;/TouchableNativeFeedback&gt; 其中给一个可点击的TouchableNativeFeedback设置了accessibilityLabel=&quot;clickZone&quot;. Appium脚本的实现 在Appium脚本中可以进行View的查找和点击： 123456789101112131415161718192021222324desired_caps = &#123; 'platformName': 'Android', 'deviceName': 'Meizu MX5', 'appPackage': 'com.androidcode', 'appActivity': '.MainActivity',&#125;driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)sleep(5)try: ## 用accessibilityLabel定位元素 el = driver.find_element_by_accessibility_id('clickZone') assert el ## 模拟点击3下 map(lambda x: el.click(), range(0, 3)) ## 用Text属性定位元素 els = driver.find_elements_by_android_uiautomator('new UiSelector().textContains("Some")') assert els logging.warning(els[0].text)except Exception, e: logging.error(e, exc_info=True)driver.quit()]]></content>
      <categories>
        <category>术业</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>react-native</tag>
        <tag>automated-test</tag>
        <tag>appium</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[函数式编程实践-缓存函数执行结果]]></title>
    <url>%2F2017%2F04%2F27%2FFP-practice-function-result-cache%2F</url>
    <content type="text"><![CDATA[受函数式编程思想启发, 实现Python函数缓存装饰器。 #纯函数 学习函数式编程可以看JS函数式编程指南中文版 纯函数可测，可重演，最重要的是，因为同样的输入一定会产生同样的输出，使得函数的执行结果是可以被缓存的。 #实现 利用Python的闭包来实现一个缓存函数执行结果的装饰器： 123456789101112131415161718def cache_result(f_key=lambda x: x, expired=0): """ @param f_key: cache_key生成函数 @param expired: cache有效时间 @return: 带cache功能的原函数 """ def dec(func): cache_v = &#123;&#125; cache_t = &#123;&#125; def new_func(*args, **kwargs): key = f_key(*args, **kwargs) if key not in cache_t or expired and time.time() - cache_t[key] &gt;= expired: cache_v[key] = func(*args, **kwargs) cache_t[key] = time.time() return cache_v[key] return new_func return dec f_key是函数入参生成的key，相当于唯一标识一组入参，默认值是id函数(像x =&gt; x这样的)。 expired是函数缓存的有效时间。 可以看到在new_func的逻辑当中，只有当缓存里没有这个key，或者缓存的时间已经过期时，才会重新执行原来的函数func并更新缓存。 #使用 如下是一个需要读取redis数据的函数，注意这个函数不是一个纯函数，因为返回结果受到外部环境(redis缓存)影响。但这里数据的实时变化频次很低，近似地认为在一段时间(5秒)内，函数的执行结果是不变的。 1234@cache_result(lambda self, user_id, locale: RedisDataHelper.get_data_key(user_id, locale), 5)def get_data(self, user_id, locale): ret = self.redis_db.get(RedisDataHelper.get_data_key(user_id, locale)) return ret 加上缓存的装饰器后，5秒内如果调用的入参经过RedisDataHelper.get_data_key产生了已经缓存过的key，则在有效期5秒内会优先返回缓存的结果。 #延伸 Python3.2开始，functools模块内置了lru_cache装饰器，参考文档。 这个装饰器会自动把函数的入参当做缓存的key来使用，并且按照最近访问的原则控制缓存的大小。 下面是官方的一个例子，用一个无限大的缓存空间来实现fibonacci数的动态规划算法： 12345@lru_cache(maxsize=None)def fib(n): if n &lt; 2: return n return fib(n-1) + fib(n-2) 有兴趣的话可以看看源代码里lru_cache装饰器的实现，大致的思路差不多，增加了lru策略以及锁相关的实现。]]></content>
      <categories>
        <category>术业</category>
      </categories>
      <tags>
        <tag>functional-programing</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在react-native中使用es7的decorator]]></title>
    <url>%2F2017%2F04%2F15%2Fwork-with-es7-decorator-in-react-nwqative%2F</url>
    <content type="text"><![CDATA[本篇文章记录如何在react-native中使用es7的decorator提案 了解decorator 或者看阮一峰的ECMAScript 6 入门 配置babel #安装依赖 在react-native项目里安装 babel-plugin-transform-decorators-legacy 和 babel-preset-react-native 这两个库: 12npm install --save-dev babel-plugin-transform-decorators-legacynpm install --save-dev babel-preset-react-native #.babelrc 在项目根目录(package.json所在的目录)添加 .babelrc 文件: 12345678&#123; "presets": [ "react-native" ], "plugins": [ "transform-decorators-legacy" ]&#125; 其中&quot;presets&quot;: [&quot;react-native&quot;]是为了让babel首先兼容react-native的其他配置,参考babel-preset-react-native 应用 #autobind 举例使用 autobind-decorator 这个库, 其作用是在声明方法时自动bind(this): 安装 1npm install --save autobind-decorator 为类方法添加装饰器 1234567891011121314151617181920212223242526272829303132333435363738import React from 'react';import ReactNative from 'react-native';const &#123; TouchableNativeFeedback, View, Text,&#125; = ReactNative;import autobind from 'autobind-decorator';class A extends React.Component &#123; constructor() &#123; super(); this.state = &#123; count: 0, &#125;; &#125; @autobind handlePress() &#123; //此方法会被自动bind(this) this.setState(&#123; count: this.state.count + 1, &#125;); &#125; render() &#123; return ( &lt;View style=&#123;&#123;flex: 1&#125;&#125;&gt; &lt;TouchableNativeFeedback onPress=&#123;this.handlePress&#125;&gt; &lt;View&gt; &lt;Text&gt;&#123;this.state.count&#125;&lt;/Text&gt; &lt;/View&gt; &lt;/TouchableNativeFeedback&gt; &lt;/View&gt; ); &#125;&#125; #更多使用decorator的例子 为组件实现scu, 参考pure-render-decorator 打印生命周期方法的调用log 123@lifecycleLogclass B extends React.Component &#123;&#125; 推广 同理可得任意需要扩展babel plugin的配置方法]]></content>
      <categories>
        <category>术业</category>
      </categories>
      <tags>
        <tag>react-native</tag>
        <tag>es7</tag>
        <tag>decorator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建Superset开发环境]]></title>
    <url>%2F2017%2F03%2F27%2Fcreate-dev-environment-for-superset%2F</url>
    <content type="text"><![CDATA[本篇文章记录如何创建一个superset的开发环境 了解superset #准备virtualenv 创建一个virtualenv, ${superset_env} 1virtualenv $&#123;superset_env&#125; 安装依赖, 参考末尾的requirements.txt 123cd $&#123;superset_env&#125;pip install -r requirements.txt. bin/activate cd到代码目录 举例: ${superset_source} 123456cd $&#123;superset_source&#125;cd superset/static/assetsnpm installnpm run prodcd $&#123;superset_source&#125;export PYTHONPATH=.:$&#123;PYTHONPATH&#125; #跑起来 12cd $&#123;superset_source&#125;superset/bin/superset runserver -p 12306 #新的terminal 1234cd $&#123;superset_source&#125;. $&#123;superset_env&#125;/bin/activateexport PYTHONPATH=.:$&#123;PYTHONPATH&#125;superset/bin/superset runserver -p 12306 #requirements.txt 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465alembic==0.9.1amqp==1.4.9anyjson==0.3.3appdirs==1.4.3Babel==2.4.0billiard==3.3.0.23boto3==1.4.4botocore==1.5.29celery==3.1.23cffi==1.10.0click==6.7colorama==0.3.7cryptography==1.7.2docutils==0.13.1enum34==1.1.6Flask==0.12Flask-AppBuilder==1.8.1Flask-Babel==0.11.1Flask-Cache==0.13.1Flask-Login==0.2.11Flask-Migrate==1.5.1Flask-OpenID==1.2.5Flask-Script==2.0.5Flask-SQLAlchemy==2.0Flask-Testing==0.6.1Flask-WTF==0.14.2future==0.16.0futures==3.0.5gunicorn==19.6.0humanize==0.5.1idna==2.5ipaddress==1.0.18itsdangerous==0.24Jinja2==2.9.5jmespath==0.9.2kombu==3.0.37Mako==1.0.6Markdown==2.6.8MarkupSafe==1.0numpy==1.12.1packaging==16.8pandas==0.18.1parsedatetime==2.0pyasn1==0.2.3pycparser==2.17pydruid==0.3.1PyHive==0.2.1pyparsing==2.2.0python-dateutil==2.6.0python-editor==1.0.3python-openid==2.2.5pytz==2016.10requests==2.13.0s3transfer==0.1.10sasl==0.2.1simplejson==3.10.0six==1.10.0SQLAlchemy==1.1.5SQLAlchemy-Utils==0.32.12sqlparse==0.1.19superset==0.17.1thrift==0.10.0thrift-sasl==0.2.1Werkzeug==0.11.15WTForms==2.1]]></content>
      <categories>
        <category>术业</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>superset</tag>
      </tags>
  </entry>
</search>
